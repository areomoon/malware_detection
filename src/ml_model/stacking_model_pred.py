
import numpy as np
import pandas as pd
from sklearn.feature_selection import SelectFromModel
from sklearn.ensemble import StackingClassifier
from sklearn.ensemble import RandomForestClassifier
from lightgbm import LGBMClassifier
from sklearn.linear_model import LogisticRegression
import argparse

parser = argparse.ArgumentParser(description='data processing')
parser.add_argument('--save_name', default=None,help='Write a prediction file save name')
args = parser.parse_args()

# Load the preprocessed data
# Access data store
data_store = pd.HDFStore('processed_data.h5')

# Retrieve data using key
train = data_store['preprocessed_train']
test = data_store['preprocessed_test']
data_store.close()

# Features selection by Randomforest
features = train.columns.difference(['md5','label'])
train_x = train[features]
train_y = train['label']
clf = RandomForestClassifier(max_depth=6, random_state=0,min_samples_leaf=10,n_estimators=300,verbose=True)
clf.fit(train_x,train_y)
selector = SelectFromModel(clf,prefit=True)
new_train_x= selector.transform(train_x)

# Train stacking model
rf   = RandomForestClassifier(max_depth=6, random_state=0,min_samples_leaf=10,n_estimators=300)
lgb1 = LGBMClassifier(n_estimators=400 ,num_leaves= 50, max_depth=6,learning_rate=0.03,subsample=0.8,reg_alpha =1.0,reg_lambda=0.5,n_jobs =6)
lgb2 = LGBMClassifier(n_estimators=300 ,num_leaves= 60, max_depth=3,learning_rate=0.07,subsample=0.8,reg_alpha =0,reg_lambda=1,n_jobs =6)
estimators = [('rf', rf),('lgbt1',lgb1),('lgbt2',lgb2)]
clf = StackingClassifier(estimators=estimators, final_estimator=LogisticRegression(max_iter=400,multi_class='multinomial',n_jobs=6)) # sklearn 0.22
clf.fit(new_train_x,train_y)

# Make Prediction

y_prob = clf.predict_proba(selector.transform(test[features]))
y_prob = np.float32(y_prob)
submit = pd.DataFrame(y_prob, columns=['Backdoor', 'PUA', 'PWS', 'Ransom', 'SoftwareBundler','Trojan', 'TrojanDownloader', 'VirTool', 'Virus', 'Worm'])
submit['md5'] = test.iloc[:,0]
submit = submit[['md5', 'Backdoor', 'PUA', 'PWS', 'Ransom', 'SoftwareBundler','Trojan', 'TrojanDownloader', 'VirTool', 'Virus', 'Worm']]
submit.to_csv(args.save_name, index=False)