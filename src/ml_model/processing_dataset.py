
import pandas as pd
from sklearn.feature_extraction.text import TfidfTransformer
import argparse

parser = argparse.ArgumentParser(description='data processing')
parser.add_argument('--filedir', default='features/',help='Choose file path')
args = parser.parse_args()

feature_file = args.filedir

# Load dataset

train = pd.read_csv('trainLabels.csv')
test = pd.read_csv('ResultSample.csv')

tr_fileprop = pd.read_csv(feature_file+'train_fileprops.csv')
te_fileprop = pd.read_csv(feature_file+'test_fileprops.csv')

# total 1 gram
tr_one_gram = pd.read_csv(feature_file+'train_one_gram.csv')
te_one_gram = pd.read_csv(feature_file+'test_one_gram.csv')
tr_one_gram = tr_one_gram.fillna(0)
te_one_gram = te_one_gram.fillna(0)

# blocksize
tr_blocksizedist = pd.read_csv(feature_file+'train_blocksizedistributions.csv')
te_blocksizedist = pd.read_csv(feature_file+'test_blocksizedistributions.csv')

tr_blocksizedist.loc[tr_blocksizedist.cs4k_q2mean.isna(), 'cs4k_q2mean'] = tr_blocksizedist.loc[tr_blocksizedist.cs4k_q2mean.isna(), 'cs4k_q1mean']
te_blocksizedist.loc[te_blocksizedist.cs4k_q2mean.isna(), 'cs4k_q2mean'] = te_blocksizedist.loc[te_blocksizedist.cs4k_q2mean.isna(), 'cs4k_q1mean']
tr_blocksizedist.loc[tr_blocksizedist.cs4k_q3mean.isna(), 'cs4k_q3mean'] = tr_blocksizedist.loc[tr_blocksizedist.cs4k_q3mean.isna(), 'cs4k_q1mean']
te_blocksizedist.loc[te_blocksizedist.cs4k_q3mean.isna(), 'cs4k_q3mean'] = te_blocksizedist.loc[te_blocksizedist.cs4k_q3mean.isna(), 'cs4k_q1mean']

# Two gram
tr_two_gram = pd.read_csv(feature_file+'train_2gram.csv')
te_two_gram = pd.read_csv(feature_file+'test_2gram.csv')

# Four gram
tr_four_gram = pd.read_csv(feature_file+'4gram_train.csv')
te_four_gram = pd.read_csv(feature_file+'4gram_test.csv')

tr_invert_four_gram = pd.read_csv(feature_file+'Invert_4gram_train.csv')
te_invert_four_gram = pd.read_csv(feature_file+'Invert_4gram_test.csv')
tr_invert_four_gram = tr_invert_four_gram.rename(columns={'md5':'4gram_elements', '4gram_elementsad1db7b3':"ad1db7b3"})
tr_invert_four_gram = tr_invert_four_gram.reset_index().rename(columns={'index':'md5'})
te_invert_four_gram = te_invert_four_gram.rename(columns={'md5':'4gram_elements','4_total_elementsad1db7b3':"ad1db7b3"})
te_invert_four_gram = te_invert_four_gram.reset_index().rename(columns={'index':'md5'})

# Merge the dataset

train = train.merge(tr_fileprop, how='left', on='md5')
train = train.merge(tr_one_gram, how='left', on='md5')
test = test.merge(te_fileprop, how='left', on='md5')
test = test.merge(te_one_gram, how='left', on='md5')

tf_idf_transformer = TfidfTransformer()
tf_idf_transformer.fit(train.iloc[:, 4:])

tr_tdidf = pd.DataFrame(tf_idf_transformer.transform(train.iloc[:, 4:]).toarray())
tr_tdidf.columns = ['tfidf_'+col for col in train.columns.values[4:]]
te_tdidf = pd.DataFrame(tf_idf_transformer.transform(test.iloc[:, 13:]).toarray())
te_tdidf.columns = ['tfidf_'+col for col in test.columns.values[13:]]

train = pd.concat([train, tr_tdidf], axis=1)
test = pd.concat([test, te_tdidf], axis=1)
train = pd.concat([train, tr_blocksizedist], axis=1)
test = pd.concat([test, te_blocksizedist], axis=1)
train = pd.concat([train, tr_four_gram.iloc[:,1:]], axis=1) # 4-gram
test = pd.concat([test, te_four_gram.iloc[:,1:]], axis=1)
train = train.merge(tr_invert_four_gram, how='left', on='md5') # invert 4-gram
test = test.merge(te_invert_four_gram, how='left', on='md5')

assert len(train) == 5907
assert len(test) == 5000

print(train.shape)
print(test.shape)

# Create storage object with filename `processed_data` in h5 format
data_store = pd.HDFStore('processed_data.h5')

# Put DataFrame into the object setting the key as 'preprocessed_df'
data_store['preprocessed_train'] = train
data_store['preprocessed_test'] = test
data_store.close()