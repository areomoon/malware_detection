import os
import numpy as np
import pandas as pd
import torch
from tqdm import tqdm
import torch.nn as nn
import argparse
from model.Malware_CNN import MalCNNnet
from utils.dataloader import MalwareTrainDataset,MalwareTestDataset ,train_val_split
from torch.utils.data import DataLoader
from torch.utils.data.sampler import SubsetRandomSampler
import torch.nn.functional as F
from torch.optim import Adam
from torch.optim import lr_scheduler

def to_np(t):
    return t.cpu().detach().numpy()

def str2bool(v):
    return v.lower() in ("yes", "true", "t", "1")

def save_model(dir_name, model, idx):
    print("MalCNNmodel_{}.model".format(idx))
    save_state_path = os.path.join(dir_name, 'MalCNNmodel_'+ idx +'_dict.pkl')
    torch.save(model.state_dict(), save_state_path)
    print("Chekcpoint saved")

def load_model(dict_name, model, idx):
    save_state_path = os.path.join(dict_name, 'MalCNNmodel_'+ idx +'_dict.pkl')
    state = torch.load(save_state_path)
    model.load_state_dict(state)
    print("Chekcpoint Loaded")

def valid(model,valid_loader,device):
    model.eval()
    test_correct= 0.0
    for batch_idx, (image, tag) in enumerate(valid_loader):
        image = image.to(device)
        tags = tags.to(device)
        outputs = model(image)
        predict_vector = np.argmax(to_np(outputs), axis=1)
        label_vector = np.argmax(to_np(tags), axis=1)
        bool_vector = predict_vector == label_vector
        test_correct += bool_vector.sum()
    accuracy = test_correct / len(valid_loader)
    print('Valiadation set Acc {:2.4f}'.format(accuracy))
    return accuracy

parser = argparse.ArgumentParser(description='CNN Malware Detection With Pytorch')

train_set = parser.add_mutually_exclusive_group()
parser.add_argument('--dataset', default='test_image', type=str,
                    help='Dataset root directory path')
parser.add_argument('--use_model_weights', default=False, type=str2bool,
                    help='Use Pretrained model')
parser.add_argument('--pretrained_weights', default=None, type=str,
                    help='Pretrained model Idx')
parser.add_argument('--model_save_dir',default='model/weights', type=str,
                    help='Trained Model State Dict Saved Path')
parser.add_argument('--batch_size', default=1, type=int,
                    help='Batch size for training')
parser.add_argument('--num_workers', default=0, type=int,
                    help='Number of workers used in dataloading')
parser.add_argument('--cuda', default=True, type=str2bool,
                    help='Use CUDA to train model')
parser.add_argument('--num_of_class', default=10, type=int,
                    help='Number of classes to predict')
parser.add_argument('--mode', default='eval',
                    help='Choose Train or Eval mode')


args = parser.parse_args()

if torch.cuda.is_available():
    if args.cuda:
        torch.set_default_tensor_type('torch.cuda.FloatTensor')
    if not args.cuda:
        print("WARNING: It looks like you have a CUDA device, but aren't " +
              "using CUDA.\n Run with --cuda for optimal training speed.")
        torch.set_default_tensor_type('torch.FloatTensor')
else:
    torch.set_default_tensor_type('torch.FloatTensor')

# Load Neural Network Model
model = MalCNNnet(num_of_classes= args.num_of_class)

# Load pretrained weights
try:
    load_model(args.model_save_dir, model, args.pretrained_weights)
except FileExistsError:
    print('Please specify the correct pretrained model weights path')


if torch.cuda.is_available() and torch.cuda.device_count() > 0:
    print("GPU device is available")
    device = torch.device('cuda')
    model.to(device)
else:
    device = torch.device('cpu')
    model.to(device)

if args.cuda:
    model= torch.nn.DataParallel(model)
    model.cuda()

print('Loading test dataset...')
print('Evaluating MalwareCNN net on: ', args.dataset)
print('Using the specified args:')
print(args)

eval_data = MalwareTestDataset(root_dir=args.dataset)


eval_loader = DataLoader(eval_data, batch_size=args.batch_size, num_workers=args.num_workers,shuffle=False)


# Create submission file
id_list = []
prediction_array_list = []

if args.mode == 'eval':
    for batch_idx, (image,id ,tags) in enumerate(tqdm(eval_loader)):
        image = image.to(device)
        tags = tags.to(device)
        outputs = model(image)

        id_list.append(id)
        prediction_array_list.append(to_np(outputs))

pred_dict = {'md5':id_list, 'prediction':prediction_array_list}
submission = pd.DataFrame.from_dict(pred_dict)
submission.to_csv('pre_submission.csv')





