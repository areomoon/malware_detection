import os
import torch
import numpy as np
import pandas as pd
from PIL import Image
from torch.utils.data import Dataset
from torchvision import transforms

train_preprocess = transforms.Compose([
    #transforms.Scale(256),
    #transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.45],std=[0.223])
])

test_preprocess = transforms.Compose([
    #transforms.Scale(256),
    #transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.45],std=[0.223])
])

def train_img_loader(path,img_size=224):
    img_pil =  Image.open(path)
    img_pil =  img_pil.resize((img_size,img_size))
    img_tensor = train_preprocess(img_pil)
    return img_tensor

def test_img_loader(path,img_size=224):
    img_pil =  Image.open(path)
    img_pil =  img_pil.resize((img_size,img_size))
    img_tensor = test_preprocess(img_pil)
    return img_tensor

def train_val_split(dataset, validation_split = 0.2, shuffle_dataset = True ,random_seed= 42):
    dataset_size = len(dataset)
    indices = list(range(dataset_size))
    split = int(np.floor(validation_split * dataset_size))
    if shuffle_dataset:
        np.random.seed(random_seed)
        np.random.shuffle(indices)
    train_indices, val_indices = indices[split:], indices[:split]
    return train_indices, val_indices


class MalwareTrainDataset(Dataset):
    """Face Landmarks dataset."""

    def __init__(self,root_dir, csv_file, loader=train_img_loader):
        '''

        :param root_dir: training image file
        :param csv_file: csv label file
        :param loader: image preprocessor
        '''
        self.root_dir = root_dir
        self.id_list = [img for img in os.listdir(self.root_dir) if '.jpg' in img]
        self.loader = loader
        self.label_frame = pd.read_csv(csv_file)


    def __len__(self):
        return len(self.id_list)

    def __getitem__(self, index):
        '''

        :param idx: List or Tensor
        :return: sample training data
        '''
        if torch.is_tensor(index):
            index = index.tolist()

        fn = self.id_list[index]
        img = self.loader(os.path.join(self.root_dir,fn))
        label_idx=self.label_frame['md5']==fn[:-4] # for .jpg file name usage
        label = np.squeeze(self.label_frame[label_idx].iloc[:,1:].values)

        return img,label


class MalwareTestDataset(Dataset):
    """Face Landmarks dataset."""

    def __init__(self,root_dir, csv_file, loader=test_img_loader):
        '''

        :param root_dir: training image file
        :param loader: image preprocessor
        '''
        self.root_dir = root_dir
        # self.id_list = [img for img in os.listdir(self.root_dir) if '.jpg' in img]
        self.loader = loader
        self.label_frame = pd.read_csv(csv_file)


    def __len__(self):
        return len(self.label_frame['md5'])

    def __getitem__(self, index):
        '''

        :param idx: List or Tensor
        :return: sample training data
        '''
        if torch.is_tensor(index):
            index = index.tolist()

        fn = self.label_frame['md5'][index]
        fn = fn + '.jpg'
        img = self.loader(os.path.join(self.root_dir,fn))
        id = fn[:-4]
        return img,id
